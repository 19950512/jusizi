version: '3.1'
services:
  postgres:
    image: 'postgres:11.1-alpine'
    container_name: jusizi_postgres
    restart: unless-stopped
    working_dir: /application
    volumes:
      - './:/application'
      - pg-config:/etc/postgresql
      - './docker/postgres/init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql'
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_DB=${DB_DATABASE}
    ports:
      - 8050:5432
    networks:
      - jusizi_network

  webserver:
    image: 'nginx:alpine'
    container_name: jusizi_nginx
    working_dir: /application
    depends_on:
      - postgres
    volumes:
      - './:/application'
      - './docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf'
    ports:
      - '8052:80'
    networks:
      - jusizi_network

  php-fpm:
    build: ./docker/php-fpm
    container_name: jusizi_php
    working_dir: /application
    depends_on:
      - postgres
    volumes:
      - './:/application'
      - './docker/php-fpm/php-ini-overrides.ini:/etc/php/8.3/fpm/conf.d/99-overrides.ini'
    networks:
      - jusizi_network
    environment:
      - DB_HOST=${DB_CONNECTION}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}

  # worker-email:
  #   build: ./docker/php-fpm # Use o Dockerfile para construir a imagem
  #   command: php src/Infra/Services/EmailService.php # Comando para iniciar o worker
  #   volumes:
  #     - './:/application' # Mapeie o código-fonte para o contêiner
  #   depends_on:
  #     - rabbitmq-master # Certifique-se de que o RabbitMQ esteja disponível antes de iniciar o worker
  #   deploy:
  #     replicas: 1 # Número inicial de réplicas
  #   networks:
  #     - jusizi_network

  # worker-billing:
  #   build: ./docker/php-fpm # Use o Dockerfile para construir a imagem
  #   command: php src/Infra/Services/BillingService.php # Comando para iniciar o worker
  #   volumes:
  #     - './:/application' # Mapeie o código-fonte para o contêiner
  #   depends_on:
  #     - rabbitmq-master # Certifique-se de que o RabbitMQ esteja disponível antes de iniciar o worker
  #   deploy:
  #     replicas: 1 # Número inicial de réplicas
  #   networks:
  #     - jusizi_network

  # worker-nfse:
  #   build: ./docker/php-fpm # Use o Dockerfile para construir a imagem
  #   command: php src/Infra/Services/NFSeService.php # Comando para iniciar o worker
  #   volumes:
  #     - './:/application' # Mapeie o código-fonte para o contêiner
  #   depends_on:
  #     - rabbitmq-master # Certifique-se de que o RabbitMQ esteja disponível antes de iniciar o worker
  #   deploy:
  #     replicas: 1 # Número inicial de réplicas
  #   networks:
  #     - jusizi_network

  # rabbitmq-master:
  #   image: rabbitmq:3.8-management-alpine
  #   hostname: rabbitmq-master
  #   restart: unless-stopped
  #   ports:
  #     - "1${EVENT_BUS_PORT}:1${EVENT_BUS_PORT}"
  #     - "${EVENT_BUS_PORT}:${EVENT_BUS_PORT}"
  #   volumes:
  #     - './docker/rabbitmq:/var/lib/rabbitmq'
  #   networks:
  #     - jusizi_network
  #   deploy:
  #     replicas: 1
  #     placement:
  #       constraints:
  #         - node.role == manager
    

  # rabbitmq-slave:
  #   image: rabbitmq:3.8-management-alpine
  #   hostname: rabbitmq-slave
  #   restart: unless-stopped
  #   volumes:
  #     - './docker/rabbitmq:/var/lib/rabbitmq'
  #   networks:
  #     - jusizi_network
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "localhost", "${EVENT_BUS_PORT}" ]
  #     interval: 5s
  #     timeout: 15s
  #     retries: 1
  #   deploy:
  #     replicas: 2
  #     placement:
  #       constraints:
  #         - node.role == worker

networks:
  jusizi_network:

volumes:
  pg-data:
  pg-config:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/./docker/postgres"